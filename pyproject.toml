##########################################################################################
#  Copyright 2022 Viacheslav Kolupaev; author's website address:
#
#   https://vkolupaev.com/?utm_source=c&utm_medium=link&utm_campaign=notebook
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this
# file except in compliance with the License. You may obtain a copy of the License at
#
#   https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software distributed under
# the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied. See the License for the specific language governing
# permissions and limitations under the License.
##########################################################################################

##########################################################################################
# Unified Python project settings file.
#
# First introduced in PEP 518 and later expanded in PEP 517, PEP 621 and PEP 660.
# This file contains build system requirements and information, which are used by pip
# to build the package.
##########################################################################################

[tool.poetry]
name = "notebook"
version = "0.1.0"
description = ""
authors = ["Viacheslav Kolupaev <v.s.kolupaev@gmail.com>"]


[tool.poetry.dependencies]
python = ">=3.10,<3.11"
aiohttp = {extras = ["speedups"], version = "^3.8.3"}
pandas = "^1.5.1"
numexpr = "^2.8.4"
Bottleneck = "^1.3.5"
sentry-sdk = "^1.10.1"
typeguard = "^2.13.3"
numpy = "^1.23.4"
aiofiles = "^22.1.0"
SQLAlchemy = "^1.4.42"
alembic = "^1.8.1"
databases = {extras = ["postgresql"], version = "^0.6.1"}
asyncpg = "^0.27.0"
psycopg2-binary = "^2.9.5"
pydantic = {extras = ["dotenv"], version = "^1.10.2"}
uvicorn = {extras = ["standard"], version = "^0.19.0"}
fastapi = "^0.85.2"
tenacity = "^8.1.0"
orjson = "^3.8.1"
pyhive = {extras = ["hive"], version = "^0.6.5"}


[tool.poetry.group.type_test.dependencies]
pydantic = {extras = ["dotenv"], version = "^1.10.2"}
mypy = "0.931"
pandas-stubs = "^1.5.1.221024"
types-psycopg2 = "^2.9.21.1"
types-aiofiles = "^22.1.0"
sqlalchemy = {extras = ["mypy"], version = "^1.4.42"}


[tool.poetry.group.lint_test.dependencies]
wemake-python-styleguide = "^0.17.0"


[tool.poetry.group.unit_test.dependencies]
pytest = "^7.2.0"
pytest-asyncio = "^0.20.1"
pytest-cov = "^4.0.0"
pytest-timeout = "^2.1.0"
pytest-aiohttp = "^1.0.4"
pytest-order = "^1.0.1"
coverage = {extras = ["toml"], version = "^6.5.0"}
hypothesis = "^6.56.4"
typeguard = "^2.13.3"
python-dateutil = "^2.8.2"


[tool.poetry.group.dev.dependencies]
mypy = "0.931"
pandas-stubs = "^1.5.1.221024"
types-psycopg2 = "^2.9.21.1"
types-aiofiles = "^22.1.0"
sqlalchemy = {extras = ["mypy"], version = "^1.4.42"}
wemake-python-styleguide = "^0.17.0"
isort = "^5.10.1"
bandit = "^1.7.4"
pre-commit = "^2.20.0"
pytest = "^7.2.0"
pytest-asyncio = "^0.20.1"
pytest-cov = "^4.0.0"
pytest-timeout = "^2.1.0"
pytest-aiohttp = "^1.0.4"
pytest-order = "^1.0.1"
coverage = {extras = ["toml"], version = "^6.5.0"}
hypothesis = "^6.56.4"
typeguard = "^2.13.3"
python-dateutil = "^2.8.2"


[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"


[tool.mypy]
# See: https://mypy.readthedocs.io/en/stable/config_file.html#using-a-pyproject-toml-file
plugins = [
    "pydantic.mypy",
    "sqlalchemy.ext.mypy.plugin"
]
files = [
    "src/boilerplate",
    "tests"
]
exclude = [
    '^src\/boilerplate\/__init__\.py$',
    '^alembic\/env\.py$'
]

python_version = "3.10"  # specify major Python version.
follow_imports = "silent"
disable_error_code = "attr-defined"
verbosity = 0
show_error_codes = true
pretty = true
disallow_any_generics = true
check_untyped_defs = true
no_implicit_reexport = true
disallow_untyped_defs = true # for strict mypy

warn_unused_configs = true
warn_return_any = true
warn_redundant_casts = true
warn_unused_ignores = true


[tool.pydantic-mypy]
# See: https://pydantic-docs.helpmanual.io/mypy_plugin/#plugin-settings
init_forbid_extra = true
init_typed = true
warn_required_dynamic_aliases = true
warn_untyped_fields = true


[[tool.mypy.overrides]]
module = [
    "uvicorn",
    "fastapi",
    "typeguard",
    "src.boilerplate.*",
]
ignore_missing_imports = true


[tool.pytest.ini_options]
minversion = "7.0"

# Directories that are not visited by pytest collector:
norecursedirs = [
    # pytest defaults.
    ".*",
#    "*.egg",
    "_darcs",
    "build",
    "CVS",
    "dist",
    "node_modules",
    "venv",
    "{arch}",

    # Custom.
#    "venv_py38",
#    "venv_py39",
#    "venv_py310",
    "venv_py??",
    "venv_py???",
    "src",
    "app",
    "docs",
    "package_scripts",
    "pdoc",
    "requirements",
    "settings",
    "site",
#    ".eggs",
    "_build",
#    ".tox",
#    ".git",
    "__pycache__",
    "tmp*",
    "${env.WORKSPACE}",
]

filterwarnings = [
    "ignore::DeprecationWarning",
]

# Command-line Flags: https://docs.pytest.org/en/latest/reference.html#command-line-flags
addopts = [
    "-ra",
    "-l",
    "-vv",
#    "--failed-first",
    "--tb=short",
    "--strict",
    "--durations=3",
    "--cov=src/boilerplate",
    "--cov-report=term-missing",
    "--cov-report=xml:coverage.xml",
#    "--cov-report=html:htmlcov",
    "--junit-xml=report.xml",
    "--hypothesis-show-statistics",
#   "--typeguard-packages=app",
]

timeout = 300
testpaths = [
    "tests",
]
python_files = "tests/test_*.py"
required_plugins = [
    "pytest-cov",
    "pytest-timeout",
]
#xfail_strict = true
markers = [
    # Usage: `pytest -m smoke`
    "smoke: marks a test as a smoke-test.",
    "fast: marks a test as a fast execution test.",
    "slow: marks a test as a slow execution test.",
    "db_dependent: marks a test as database dependent.",
    "network_dependent: marks a test as network dependent.",
    "requires_gpu: mark a test that requires a GPU to run.",
    "integration: marks a test that is meant to be used as integration testing.",
    "internal_data_sources: marks a test as a test of internal data sources.",
    "external_data_sources: marks a test as a test of external data sources.",
    # Docs: https://docs.pytest.org/en/latest/example/simple.html#incremental-testing-test-steps
    "incremental: mark for abort incremental-marked tests in a class.",
]

# Logging config.
# Usage: `pytest --capture=no`
log_cli = true
log_cli_level = "DEBUG"
log_cli_format = "%(asctime)s | %(levelname)s | %(name)s | %(funcName)s:%(lineno)d | %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
