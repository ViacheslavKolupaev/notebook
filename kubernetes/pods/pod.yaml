apiVersion: v1
kind: Pod
metadata:
  name: postgres
  namespace: dev  # if not specified, it will be `default`
  labels:
    app: db
    tier: db-tier
spec:
  securityContext:  # these settings will apply to all containers of this Pod
    runAsUser:  1000
  serviceAccountName: my-app-sa  # custom service-account
  # automountServiceAccountToken: false
  containers:
    - name: postgres
      image: postgres
      command: ["sleep"]  # overrides the Dockerfile instruction `ENTRYPOINT["sleep]`
      args: ["10"]  # overrides the Dockerfile instruction `CMD["5"]`
      securityContext:
        runAsUser:  1000
        capabilities:  # only supported at the container level
          add:
            - "MAC_ADMIN"

      # environment variables options
      envFrom:  # inject everything from env file
        - configMapRef:
            name: my_config_map  # need to be created in my_config_map.yaml

        # All secrets from .yaml
        - secretRef:
            name: my-app-secret  # refers to my_app_secret_data.yaml
      env:  # inject only one key-value pair
        # Plain Key Value
        - name: POSTGRES_PASSWORD
          value: mysecretpassword

        # ConfigMap
        - name: KEY_1
          valueFrom:
            configMapKeyRef:
              name: my_config_map
              key: KEY_1

        # Single secret from .yaml
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: my-app-secret  # refers to my_app_secret_data.yaml
              key: DB_USER
      # Resource Requests
      resources:
        requests:
          memory: "1Gi"
          cpu: 1
        limits:
          memory: "2Gi"
          cpu: 2
  tolerations:
    # Use double quotes
    - key: "app"
      operator: "Equal"
      value: "blue"
      effect: "NoSchedule"
  volumes:
    - name: my-app-secret-volume
      secret:
        secretName: my-app-secret
        # ls /opt/my-app-secret-volumes
        # cat /opt/my-app-secret-volumes/DB_USER
  nodeSelector:
    size: Large
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
              - key: size
                operator: Exists
              - key: size
                operator: In
                values:
                  - Large
                  - Medium
              - key: size
                operator: NotIn
                values:
                  - Small
